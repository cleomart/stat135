gamma
size
size = length(hcmv)
expected_value = 299354/296
lambda_gamma = 1/expected_value
gamma = hcmv[-(1:2)] - hcmv[-c(size:size-1)]
gamma = hcmv[-1] - hcmv[-size]
gamma
hcmv[-1]
hcmv[-size]
hcmv[-1] - hcmv[-size]
gamma = locations[-1] - locations[-size]
gamma
location[-1]
locations[-1]
size = length(locations)
expected_value = 299354/296
lambda_gamma = 1/expected_value
gamma = locations[-1] - locations[-size]
gamma
range = c(1:max(gamma1))
size = length(locations)
expected_value = 299354/296
lambda_gamma = 1/expected_value
gamma1 = locations[-1] - locations[-size]
gamma1
range = c(1:max(gamma1))
size = length(locations)
size = length(locations)
expected_value = 299354/296
lambda = 1/expected_value
gamma1 = locations[-1] - locations[-size]
gamma1
range = c(1:max(gamma1))
hist(gamma1, probability = TRUE)
curve(dexp(x, lambda), add = TRUE, col = 'red', lty = 2, lwd =2)
gamma2 = locations[-c(1:2)] - locations[-c(size-1:size)]
gamma2
lines(dgamma (1:max(gamma2), shape = 2, lamda), col = "red", lwd = 2, lty = 2)
hist(gamma2, probability = TRUE)
lines(dgamma (1:max(gamma2), shape = 2, lambda), col = "red", lwd = 2, lty = 2)
hist(gamma2, probability = TRUE)
lines(dgamma (1:max(gamma2), shape = 2, lambda), col = "red", lwd = 2, lty = 2)
density(gamma2)
hist(gamma2, probability = TRUE)
lines(dgamma (1:max(gamma2), shape = 2, lambda), col = "red", lwd = 2, lty = 2)
sum_consecutive_pair = locations[-1] + locations[-296]
hist(sum_consecutive_pair, main= "Consecutive Pair of Palindromes", xlab = "Sum of Two Consecutive Pair of Palindromes")
grp = 3
sum_consecutive_triplets = sapply(1:(length(locations)-grp+1),function(x){sum(locations[x:(x+grp-1)])})
hist(sum_consecutive_triplets, xlab = "Sum of Three Consecutive Palindromes", main = "Three Consecutive Palindromes")
intsall.package('knitr')
install.packages('knitr')
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
kable(observed_num_interval)
library(knitr)
kable(observed_num_interval)
kable(observed_num_interval, expected_num_interval)
data.frame(observed_num_interval ,expected_num_interval)
data.frame(observed_num_interval ,round(expected_num_interval, 2))
kable(data)
data_table = data.frame(observed_num_interval ,round(expected_num_interval, 2))
kable(data_table)
c('<2', 1)
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
categories = c('at most 2', 3, 4, 5, 6, 7, 8, 9, '10+')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
kable(data_table)
categories = c('0 1 or 2', 3, 4, 5, 6, 7, 8, 9, '10+')
categories = c('0 1 or 2', 3, 4, 5, 6, 7, 8, 9, '10+')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
kable(data_table)
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2), row.names = 'Categories')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2), row.names = 'Categories')
categories = c('0 1 or 2', 3, 4, 5, 6, 7, 8, 9, '10+')
column_names = c('Palindrome Count', 'Obserevd Number of Intevals', 'Expected Number of Intervcals')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2), row.names = column_names)
categories = c('0 1 or 2', 3, 4, 5, 6, 7, 8, 9, '10+')
column_names = c('Palindrome Count', 'Obserevd Number of Intevals', 'Expected Number of Intervcals')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2), col.names = column_names)
kable(data_table)
kable(data_table, col.names = column_names)
column_names = c('Palindrome Count', 'Observedd Number of Intevals', 'Expected Number of Intervcals')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
kable(data_table, col.names = column_names)
categories = c('0 1 or 2', 3, 4, 5, 6, 7, 8, 9, '10+')
column_names = c('Palindrome Count', 'Observed Number of Intervals', 'Expected Number of Intervals')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
kable(data_table, col.names = column_names)
column_names = c('Palindrome Count   ', 'Observed Number of Intervals   ', 'Expected Number of Intervals')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
kable(data_table, col.names = column_names)
sum_consecutive_pair = locations[-1] + locations[-296]
hist(sum_consecutive_pair, main= "Consecutive Pair of Palindromes", xlab = "Sum of Two Consecutive Pair of Palindromes")
grp = 3
sum_consecutive_triplets = sapply(1:(length(locations)-grp+1),function(x){sum(locations[x:(x+grp-1)])})
hist(sum_consecutive_triplets, xlab = "Sum of Three Consecutive Palindromes", main = "Three Consecutive Palindromes")
sum_consecutive_triplets = sapply(1:(length(locations)-grp+1),function(x){sum(locations[x:(x+grp-1)])})
hist(sum_consecutive_triplets, xlab = "Sum of Three Consecutive Palindromes", main = "Three Consecutive Palindromes")
grp = 3
sum_consecutive_triplets = sapply(1:(length(locations)-grp+1),function(x){sum(locations[x:(x+grp-1)])})
plot(density(sum_consecutive_triplets), xlab = "Sum of Three Consecutive Palindromes", main = "Three Consecutive Palindromes")
plot(density(sum_consecutive_pair))
hist(sum_consecutive_pair, main= "Consecutive Pair of Palindromes", xlab = "Sum of Two Consecutive Pair of Palindromes")
plot(density(sum_consecutive_pair), add= TRUE)
hist(sum_consecutive_pair, main= "Consecutive Pair of Palindromes", xlab = "Sum of Two Consecutive Pair of Palindromes")
plot(density(sum_consecutive_pair), add= TRUE)
plot(density(spacing))
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE)
curve(dexp(x,rate_exp), col = 'blue', lty = 2, add = TRUE)
plot(density(spacing) , x = c(0:max(spacing)))
plot(density(spacing) , x = c(range))
plot(density(spacing))
plot(density(spacing), main = "Spacing Between Two Consecutive Palindrome")
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes")
hist(sum_consecutive_triplets, xlab = "Sum of Three Consecutive Palindromes", main = "Three Consecutive Palindromes")
hist(sum_consecutive_pair, add = TRUE)
hist(sum_consecutive_triplets, xlab = "Sum of Three Consecutive Palindromes", main = "Three Consecutive Palindromes")
hist(sum_consecutive_pair, add = TRUE)
barplot(data_table)
barplot(expected_num_interval)
barplot(observed_num_interval, add = TRUE)
barplot(expected_num_interval)
barplot(observed_num_interval, add = TRUE)
barplot(expected_num_interval, xlim = categories)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, width = 5)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, width = 1)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, space = 2)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, space = 5)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, space = 5, width = 10)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, space = 0, width = 10)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, space = 1, width = 10)
barplot(expected_num_interval, horiz = TRUE, names.arg = categories, space =.1, width = 10)
barplot(counts, horiz = TRUE, names.arg = categories, space =.1, width = 10)
counts = table(observed_num_interval ,round(expected_num_interval, 2))
barplot(counts, horiz = TRUE, names.arg = categories, space =.1, width = 10)
barplot(counts, horiz = TRUE, names.arg = C("<3 counts", "3 counts", "4 counts", "5 counts", "6 counts", "7 counts", "8 counts", "9 counts", "10+ counts"))
barplot(counts, horiz = TRUE, names.arg = c("<3 counts", "3 counts", "4 counts", "5 counts", "6 counts", "7 counts", "8 counts", "9 counts", "10+ counts"))
barplot(counts, horiz = TRUE, names.arg = c("<3 counts", "3 counts", "4 counts", "5 counts", "6 counts", "7 counts", "8 counts", "9 counts", "10+ counts"), beside = TRUE)
barplot(counts, horiz = TRUE, beside = TRUE)
# Table of Observed and Expected Number of Intervals
categories = c('0 1 or 2', 3, 4, 5, 6, 7, 8, 9, '10+')
column_names = c('Palindrome Count', 'Observed Number of Intervals', 'Expected Number of Intervals')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
kable(data_table, col.names = column_names)
counts = table(observed_num_interval ,round(expected_num_interval, 2))
barplot(counts, beside = TRUE)
barplot(expected_num_interval)
barplot(observed_num_interval)
counts
barplot(expected_num_interval)
barplot(observed_num_interval, add=TRUE)
barplot(expected_num_interval, col = 'blue')
barplot(observed_num_interval,col = 'red', add=TRUE)
barplot(expected_num_interval, col = rgb(0,0,1,.3))
barplot(observed_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3))
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories )
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories )
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, ylim = c(0:12))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, ylim = c(0:20))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, ylim = 12)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, ylim = 12)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories)
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories)
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
legend(50,40,legend=c("Observed Number of Intervals","Expected Number of Intervals"),
fill=c(rgb(0,0,1,.3),rgb(1,0,0,.3)))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories)
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
legend(50,40,legend=c("Observed Number of Intervals","Expected Number of Intervals"), fill=c(rgb(0,0,1,.3),rgb(1,0,0,.3)))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
legend(50,40,legend=c("Observed","Expected"), fill=c(rgb(0,0,1,.3),rgb(1,0,0,.3)))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE,
legend(50,40,legend=c("Observed","Expected"), fill=c(rgb(0,0,1,.3),rgb(1,0,0,.3))))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE,
legend(50,40,legend=c("Observed","Expected") ))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", x_lab = "Palndrome Count")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE,
legend(50,40,legend=c("Observed","Expected") ))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE,
legend(50,40,legend=c("Observed","Expected") ))
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE, legend = c('Expected', 'Observed'))
counts = table(observed_num_interval ,round(expected_num_interval, 2))
counts
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE, legend = 'Expected')
counts = data.frame(observed_num_interval ,round(expected_num_interval, 2))
counts
barplot(counts)
counts = table(observed_num_interval ,expected_num_interval)
counts
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE, legend(50,40,legend=c("Non-smokers","Smokers"),
fill=c(rgb(0,0,1,.3),rgb(1,0,0,.3))))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE) legend(50,40,legend=c("Non-smokers","Smokers"),
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3),legend = "Expected", add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3),legend = c("Expected", "Observed"), add=TRUE)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3),legend = c("Expected", "Observed"), add=TRUE, beside = TRUE)
table(expected_num_interval)
table(observed_num_interval)
observed_num_interval
table(observed_num_interval)
table(observed_num_interval, observed_num_interval)
count = table(observed_num_interval, observed_num_interval)
barplot(count)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3),legend = c("Expected", "Observed"), add=TRUE, args.legend = list(x = "topleft"))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palndrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3),legend = c("Expected"), add=TRUE, args.legend = list(x = "topleft"))
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palindrome Count", legend = "Observed")
kable(data_table, col.names = column_names)
hist(locations, breaks = 50000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 500000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 100000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 150000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 200000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 300000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 400000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 500000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 200000, xlab = "Location", main = "Locations of the Palindromes")
hist(locations, breaks = 200000, xlab = "Location", main = "Locations of the Palindromes", col = "red")
hist(locations, breaks = 200000, xlab = "Location", main = "Locations of the Palindromes")
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab - "Space", col = 'red')
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space", col = 'red')
---
title: "Lab2"
author: "Leomart Crisostomo"
date: "3/22/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r}
col_name = "Location"
col_type = "integer"
hcmv <- read.csv(file = "hcmv.data",
sep = ",",
header = TRUE,
na.string = "?",
col.names = col_name,
colClasses = col_type
)
locations = hcmv$Location
hist(locations, breaks = 200000, xlab = "Location", main = "Locations of the Palindromes")
# Spacings of Palindromes
spacing = locations[-1] - locations[-296]
# exponential
range = locations[296] - locations[1]
rate_exp = 296/range
x = c(0:max(spacing))
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE)
curve(dexp(x,rate_exp), col = 'blue', lty = 2, add = TRUE)
# Sum of Consecutive Pair
sum_consecutive_pair = locations[-1] + locations[-296]
hist(sum_consecutive_pair, main= "Consecutive Pair of Palindromes", xlab = "Sum of Two Consecutive Pair of Palindromes")
# Sum of Three Consecutive Palindromes
grp = 3
sum_consecutive_triplets = sapply(1:(length(locations)-grp+1),function(x){sum(locations[x:(x+grp-1)])})
hist(sum_consecutive_triplets, xlab = "Sum of Three Consecutive Palindromes", main = "Three Consecutive Palindromes")
```
```{r counts}
# Counts of Palindromes in intervals of 5000
# Use Chi Squared Test
library(knitr)
interval = 5000
max(hcmv) / 5000
bins = c()
for (i in 0:46){
bins = c(bins, i * interval)
}
counts_hist = hist(locations, breaks = bins, main = "Palindrome Counts in Intervals of 5000")
counts_palindromes = counts_hist$counts
palindrome_bin_count = c(0,2,3,4,5,6,7,8,9,20)
counts_palindromes_hist = hist(counts_palindromes, breaks= palindrome_bin_count , freq = TRUE)
#hist(counts_palindromes, breaks= palindrome_bin_count , freq = TRUE)
observed_num_interval = counts_palindromes_hist$counts
num_intervals = length(counts_palindromes)
rate = length(locations)/num_intervals
expected_0_1_2 = num_intervals * exp(-rate)*(1+rate+ rate^2/2)
expected_0_1_2
expected_num_interval = c(expected_0_1_2)
for (i in 3:9){
expected_num_interval = c(expected_num_interval, num_intervals* exp(-rate) *(rate^i / factorial(i)))
}
expected_num_interval = c(expected_num_interval, num_intervals- sum(expected_num_interval))
# Table of Observed and Expected Number of Intervals
categories = c('0 1 or 2', 3, 4, 5, 6, 7, 8, 9, '10+')
column_names = c('Palindrome Count', 'Observed Number of Intervals', 'Expected Number of Intervals')
data_table = data.frame(categories, observed_num_interval ,round(expected_num_interval, 2))
kable(data_table, col.names = column_names)
barplot(observed_num_interval, col = rgb(0,0,1,.3), names.arg = categories, main = "Observed Vs Expected Number of Intervals", xlab = "Palindrome Count", legend = "Observed")
barplot(expected_num_interval,col = rgb(1,0,0,.3),legend = c("Expected"), add=TRUE, args.legend = list(x = "topleft"))
# Perform Chi Squared Test
test_statistic = sum((expected_num_interval - observed_num_interval)^2 / expected_num_interval)
test_statistic
p_value = pchisq(test_statistic, df=9, lower.tail = FALSE)
```
```{r maximum hits}
# Maximum Number of Hits
maximum_hits = max(counts_palindromes)
test_statistic_max = 0
for (i in 0:9){
test_statistic_max = test_statistic_max + (rate^i *exp(-rate) / factorial(i))
}
test_statistic_max = 1- test_statistic_max
test_statistic_max
```
```{r Gamma}
size = length(locations)
expected_value = 299354/296
lambda = 1/expected_value
gamma1 = locations[-1] - locations[-size]
gamma1
range = c(1:max(gamma1))
hist(gamma1, probability = TRUE)
curve(dexp(x, lambda), add = TRUE, col = 'red', lty = 2, lwd =2)
gamma2 = locations[-c(1:2)] - locations[-c(size-1:size)]
gamma2
hist(gamma2, probability = TRUE)
lines(dgamma (1:max(gamma2), shape = 2, lambda), col = "red", lwd = 2, lty = 2)
density(gamma2)
```
test_statistic_max
test_statistic_max = max(counts_palindromes)
p_value_max = 0
for (i in 0:10){
p_value_max = p_value_max + (rate^i *exp(-rate) / factorial(i))
}
test_statistic_max = 1- test_statistic_max
test_statistic_max
test_statistic_max = max(counts_palindromes)
p_value_max = 0
for (i in 0:10){
p_value_max = p_value_max + (rate^i *exp(-rate) / factorial(i))
}
p_value_max = 1- p_value_max
p_value_max
p_value_max = max(counts_palindromes)
p_value_max = 0
for (i in 0:10){
p_value_max = p_value_max + (rate^i *exp(-rate) / factorial(i))
}
p_value_max = 1- p_value_max
p_value_max
test_statistic_max = max(counts_palindromes)
for (i in 0:test_statistic_max){
p_value_max = p_value_max + (rate^i *exp(-rate) / factorial(i))
}
p_value_max = 1- p_value_max
p_value_max
test_statistic
test_statistic_max
p_value_max = 0
for (i in 0:test_statistic_max){
p_value_max = p_value_max + (rate^i *exp(-rate) / factorial(i))
}
p_value_max = 1- p_value_max
p_value_max
test_statistic_max
boxplot(counts_palindromes)
boxplot(counts_palindromes, main = "Palindromes Count")
qnorm(counts_palindromes)
plot(counts_palindromes)
plot(counts_palindromes, density = T)
plot(counts_palindromes)
boxplot(counts_palindromes, main = "Palindromes Count")
plot(counts_palindromes, color = 'green')
plot(counts_palindromes, col = 'green')
plot(counts_palindromes, col = 'blue')
plot(counts_palindromes, col = 'blue', main = "Palindrom Count ")
boxplot(counts_palindromes, main = "Palindromes Count")
plot(counts_palindromes, col = 'blue', main = "Palindrom Count ", xlab = 'Number of Palindromes')
scatter(counts_palindromes, col = 'blue', main = "Palindrom Count ", xlab = 'Number of Palindromes')
scatter.smooth(counts_palindromes, col = 'blue', main = "Palindrom Count ", xlab = 'Number of Palindromes')
scatter.smooth(counts_palindromes, col = 'blue', main = "Palindromes Count ", ylab = 'Number of Palindromes')
size = length(locations)
expected_value = 299354/296
lambda = 1/expected_value
gamma1 = locations[-1] - locations[-size]
range = c(1:max(gamma1))
hist(gamma1, probability = TRUE)
curve(dexp(x, lambda), add = TRUE, col = 'red', lty = 2, lwd =2)
gamma2 = locations[-c(1:2)] - locations[-c(size-1:size)]
hist(gamma2, probability = TRUE)
lines(dgamma (1:max(gamma2), shape = 2, lambda), col = "red", lwd = 2, lty = 2)
density(gamma2)
plot(locations, breaks = 100000, xlab = "Location", main = "Locations of the Palindromes")
qqplot(locations, xlab = "Location", main = "Locations of the Palindromes")
qqplot(locations,rnorm(0,1), xlab = "Location", main = "Locations of the Palindromes")
qqplot(locations,norm(0,1), xlab = "Location", main = "Locations of the Palindromes")
qqplot(locations, norm(296,0,1), xlab = "Location", main = "Locations of the Palindromes")
qqplot(locations, norm(296,0,1))
qqplot(locations, rnorm(296,0,1))
summary(counts_palindromes)
qqnorm(location)
qqnorm(locations)
qqline(locations)
qqnorm(locations)
qqline(locations)
qqnorm(locations)
qqline(locations, col = 'red')
qqnorm(locations, col = 'cyan')
qqline(locations, col = 'red')
qqnorm(locations, col = 'cyan4')
qqline(locations, col = 'red')
qqnorm(locations, col = 'cyan4')
qqline(locations, col = 'red')
qqnorm(locations)
qqnorm(locations)
qqline(locations, col = 'cyan')
qqnorm(locations)
qqline(locations, col = 'cyan4')
qqnorm(locations)
qqline(locations, col = 'cyan3')
qqnorm(locations)
qqline(locations, col = 'red')
locations = hcmv$Location
density(gamma2)
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
sum_consecutive_pair = locations[-1] + locations[-296]
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE)
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
curve(dexp(x,rate_exp), col = 'blue', lty = 2, add = TRUE)
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
curve(dexp(x,rate_exp), col = 'red', lty = 2, add = TRUE)
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
curve(dexp(x,rate_exp), col = 'green', lty = 2, add = TRUE)
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
curve(dexp(x,rate_exp), col = 'purple', lty = 2, add = TRUE)
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space", col = 'green')
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space", col = 'gray')
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
curve(dexp(x,rate_exp), col = 'darkviolet', lty = 2, add = TRUE)
counts_palindromes_hist = hist(counts_palindromes, breaks = palindrome_bin_count , freq = TRUE, xlab = "Palindromes Count", col = 'darkslategray3')
counts_hist = hist(locations, breaks = bins, main = "Palindrome Counts in Intervals of 5000", xlab = "Locations", colo = 'deeppink2')
counts_hist = hist(locations, breaks = bins, main = "Palindrome Counts in Intervals of 5000", xlab = "Locations", colo = 'deeppink3')
counts_palindromes = counts_hist$counts
palindrome_bin_count = c(0,2,3,4,5,6,7,8,9,20)
counts_palindromes_hist = hist(counts_palindromes, breaks = palindrome_bin_count , freq = TRUE, xlab = "Palindromes Count", col = 'darkslategray3')
boxplot(counts_palindromes, main = "Palindromes Count", col = 'gold', ylab = 'f')
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
hist(spacing, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
curve(dexp(x,rate_exp), col = 'darkviolet', lty = 2, add = TRUE)
hist(palindrome_counts, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
hist(counts_palindromes, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
plot(density(counts_palindromes), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
hist(counts_palindromes, xlab = "Spacing", main = "Spacing between Two Consecutive Palindromes", prob = TRUE, col = 'cyan')
plot(density(counts_palindromes), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
plot(density(spacing), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
abline(v= 18)
plot(density(counts_palindromes), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
abline(v= 18)
plot(density(counts_palindromes), main = "Spacing Between Two Consecutive Palindromes", xlab = "Space")
abline(v= 18)
curve(dexp(x,rate_exp), col = 'darkviolet', lty = 2, add = TRUE)
hcmv
table(hcmv)
hcmv
# Maximum Number of Hits
scatter.smooth(counts_palindromes, col = 'blue', main = "Palindromes Count ", ylab = 'Number of Palindromes')
summary(counts_palindromes)
boxplot(counts_palindromes, main = "Palindromes Count", col = 'gold', ylab = 'Count')
test_statistic_max = max(counts_palindromes)
p_value_max = 0
for (i in 0:test_statistic_max){
p_value_max = p_value_max + (rate^i *exp(-rate) / factorial(i))
}
p_value_max = 1- p_value_max
p_value_max
data_categories = data.frame(bins, counts_palindromes)
new_bins = bins[1:size(bins)]
new_bins = bins[1:length(bins)]
data_categories = data.frame(bins, counts_palindromes)
data_categories = data.frame(new_bins, counts_palindromes)
new_bins = bins[1:length(bins)]
data_categories = data.frame(new_bins, counts_palindromes)
new_bins = bins[1:length(bins)-1]
data_categories = data.frame(new_bins, counts_palindromes)
data_categories
kable(data_categories )
data_interval = data.frame(bins_interval, counts_palindromes)
p_value_max
bins_interval = bins[1:length(bins)-1]
data_interval = data.frame(bins_interval, counts_palindromes)
kable(data_interval, col.names = c('Interval', 'Palindromes Count') )
max_segment = c(90000, 95000)
